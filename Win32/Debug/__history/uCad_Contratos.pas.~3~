unit uCad_Contratos;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uCad_Base, Vcl.StdCtrls, Vcl.ExtCtrls,
  Vcl.Mask, uContratos, uContratosController, uCons_Empresas, uCons_Clientes, uCons_Fornecedores,
  cxGraphics, cxControls, cxLookAndFeels, cxLookAndFeelPainters, dxSkinsCore,
  dxSkinBasic, dxSkinBlack, dxSkinBlue, dxSkinBlueprint, dxSkinCaramel,
  dxSkinCoffee, dxSkinDarkroom, dxSkinDarkSide, dxSkinDevExpressDarkStyle,
  dxSkinDevExpressStyle, dxSkinFoggy, dxSkinGlassOceans, dxSkinHighContrast,
  dxSkiniMaginary, dxSkinLilian, dxSkinLiquidSky, dxSkinLondonLiquidSky,
  dxSkinMcSkin, dxSkinMetropolis, dxSkinMetropolisDark, dxSkinMoneyTwins,
  dxSkinOffice2007Black, dxSkinOffice2007Blue, dxSkinOffice2007Green,
  dxSkinOffice2007Pink, dxSkinOffice2007Silver, dxSkinOffice2010Black,
  dxSkinOffice2010Blue, dxSkinOffice2010Silver, dxSkinOffice2013DarkGray,
  dxSkinOffice2013LightGray, dxSkinOffice2013White, dxSkinOffice2016Colorful,
  dxSkinOffice2016Dark, dxSkinOffice2019Black, dxSkinOffice2019Colorful,
  dxSkinOffice2019DarkGray, dxSkinOffice2019White, dxSkinPumpkin, dxSkinSeven,
  dxSkinSevenClassic, dxSkinSharp, dxSkinSharpPlus, dxSkinSilver,
  dxSkinSpringtime, dxSkinStardust, dxSkinSummer2008, dxSkinTheAsphaltWorld,
  dxSkinTheBezier, dxSkinsDefaultPainters, dxSkinValentine,
  dxSkinVisualStudio2013Blue, dxSkinVisualStudio2013Dark,
  dxSkinVisualStudio2013Light, dxSkinVS2010, dxSkinWhiteprint,
  dxSkinXmas2008Blue, cxContainer, cxEdit, Vcl.Menus, dxLayoutcxEditAdapters,
  dxLayoutControlAdapters, cxClasses, dxLayoutLookAndFeels, dxLayoutContainer,
  cxLabel, cxButtons, cxTextEdit, dxLayoutControl, cxCurrencyEdit;

type
  TCad_Contratos = class(TCad_Base)
    dxLayoutGroup6: TdxLayoutGroup;
    dxLayoutGroup7: TdxLayoutGroup;
    dxLayoutGroup8: TdxLayoutGroup;
    cxTextEdit1: TcxTextEdit;
    dxLayoutItem9: TdxLayoutItem;
    cxTextEdit2: TcxTextEdit;
    dxLayoutItem10: TdxLayoutItem;
    cxTextEdit3: TcxTextEdit;
    dxLayoutItem11: TdxLayoutItem;
    cxTextEdit4: TcxTextEdit;
    dxLayoutItem12: TdxLayoutItem;
    cxButton1: TcxButton;
    dxLayoutItem14: TdxLayoutItem;
    cxCurrencyEdit1: TcxCurrencyEdit;
    dxLayoutItem13: TdxLayoutItem;
    cxTextEdit6: TcxTextEdit;
    dxLayoutItem15: TdxLayoutItem;
    cxButton2: TcxButton;
    dxLayoutItem16: TdxLayoutItem;
//    lbl_CodDoc: TLabel;
//    lbl_Descricao: TLabel;
//    lbl_Moeda: TLabel;
//    lbl_Cliente_Fornecedor: TLabel;
//    lbl_Empresa: TLabel;
//    edt_CodDoc: TEdit;
//    edt_Descricao: TEdit;
//    edt_Moeda: TEdit;
//    Edt_Cliente_Fornecedor: TEdit;
//    edt_Empresa: TEdit;
//    lbl_Valor: TLabel;
//    btn_CliFor: TButton;
//    btn_Pesquisar: TButton;
//    edt_Valor: TMaskEdit;
//    rg_Tipo: TRadioGroup;
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure rg_TipoClick(Sender: TObject);
    procedure btn_PesquisarClick(Sender: TObject);
    procedure btn_SalvarClick(Sender: TObject);
    procedure btn_CliForClick(Sender: TObject);
  private
    { Private declarations }
    procedure popularInterface;
    procedure PopularObjeto;
    function ValidarDados: boolean;
    procedure AlterarCampos;
  public
    { Public declarations }
    Contrato : TContratos;
    ContratosControl: TContratosController;
  end;

var
  Cad_Contratos: TCad_Contratos;

implementation

{$R *.dfm}

procedure TCad_Contratos.AlterarCampos;
begin
  if Rg_tipo.ItemIndex = 0 then
  begin
    Contrato.Tipo := TpReceber;
    Contrato.Fornecedor.LimparDados;
    lbl_cliente_fornecedor.Caption := 'Cliente';
  end
  else
  begin
    Contrato.Tipo := TpPagar;
    Contrato.Cliente.LimparDados;
    lbl_cliente_fornecedor.Caption := 'Fornecedor';
  end;
end;

procedure TCad_Contratos.btn_CliForClick(Sender: TObject);
var ConsClienteForm: TCons_Clientes;
    ConsFornecedorForm: TCons_Fornecedores;
begin
  inherited;
  if rg_Tipo.ItemIndex = 0 then
  begin
     ConsClienteForm := TCons_Clientes.Create(nil);
     try
        ConsClienteForm.Selecao := True;
        ConsClienteForm.ShowModal;
        Contrato.Cliente := (ConsClienteForm.Cliente.clone);
        Edt_Cliente_Fornecedor.text := Contrato.Cliente.Nome;
     finally
        FreeAndNil(ConsClienteForm);
     end;
  end
  else
  begin
     ConsFornecedorForm := TCons_Fornecedores.Create(nil);
     try
        ConsFornecedorForm.Selecao := True;
        ConsFornecedorForm.ShowModal;
        Contrato.Fornecedor := (ConsFornecedorForm.Fornecedor.clone);
        Edt_Cliente_Fornecedor.text := Contrato.Fornecedor.Nome;
     finally
        FreeAndNil(ConsFornecedorForm);
     end;
  end;
end;

procedure TCad_Contratos.btn_PesquisarClick(Sender: TObject);
var ConsEmpresaForm: TCons_Empresas;
begin
   ConsEmpresaForm := TCons_Empresas.Create(nil);
   try
      ConsEmpresaForm.Selecao := True;
      ConsEmpresaForm.ShowModal;
      Contrato.Empresa := (ConsEmpresaForm.Empresa.clone);
      edt_Empresa.text := Contrato.Empresa.Nome;
   finally
      FreeAndNil(ConsEmpresaForm);
   end;
end;

procedure TCad_Contratos.btn_SalvarClick(Sender: TObject);
begin
  if ValidarDados then
  begin
    popularObjeto;

    if not ContratosControl.VerificarNome(Contrato) then
     begin
        if Inclusao then
           ContratosControl.Inserir(Contrato)
        else
          ContratosControl.Alterar(Contrato);

        self.Close;
     end
     else
      raise Exception.Create('Já Existe um Contrato cadastrado com esse Numero de documento');
  end;
end;

procedure TCad_Contratos.FormCreate(Sender: TObject);
begin
  inherited;
  Contrato := TContratos.Create;
  ContratosControl:= TContratosController.Create;
end;

procedure TCad_Contratos.FormDestroy(Sender: TObject);
begin
  inherited;
  Contrato.Free;
  ContratosControl.Free;
end;

procedure TCad_Contratos.FormShow(Sender: TObject);
begin
  inherited;
  if not inclusao then
    popularInterface;
end;

procedure TCad_Contratos.popularInterface;
begin
  rg_tipo.ItemIndex := Integer(Contrato.tipo);
  AlterarCampos;
  edt_id.text := inttostr(Contrato.ID);
  edt_coddoc.text := Contrato.codigodoc;
  edt_descricao.text := Contrato.Descricao;
  edt_moeda.text := Contrato.Moeda;
  edt_Empresa.text := Contrato.Empresa.Nome;
  edt_valor.text := CurrToStr(Contrato.Valor);
  if rg_tipo.ItemIndex = 0 then
     Edt_Cliente_Fornecedor.Text := Contrato.Cliente.Nome
  else
     Edt_Cliente_Fornecedor.Text := Contrato.Fornecedor.Nome;

  lbl_Cad.Visible := True;
  lbl_DataCad.Visible := True;
  lbl_DataCad.Caption := Contrato.User_Insert + '-' + DatetoStr(Contrato.DataCad);

  lbl_DataAlt.Caption := Contrato.User_Update + '-' + DatetoStr(Contrato.DataUltAlt);
  Lbl_Alt.Visible := True;
  lbl_DataAlt.Visible := True;
end;

procedure TCad_Contratos.PopularObjeto;
begin
  Contrato.ID := strtoint(edt_id.text);
  Contrato.CodigoDoc := edt_CodDoc.text;
  Contrato.Descricao := edt_Descricao.text;
  Contrato.Moeda := edt_Moeda.text;
  Contrato.Valor := StrToCurr(edt_Valor.Text);
  Contrato.Tipo  := TTipoContrato(Rg_Tipo.ItemIndex);
end;

procedure TCad_Contratos.rg_TipoClick(Sender: TObject);
begin
  inherited;
  AlterarCampos;
end;

function TCad_Contratos.ValidarDados: boolean;
begin
  result := false;
  if not (length(edt_Coddoc.Text) > 0) then
  begin
    ShowMessage('Insira o Codigo do Contrato');
    edt_Coddoc.setFocus;
    exit;
  end;

  if not (length(edt_descricao.Text) > 0) then
  begin
    ShowMessage('Insira a descrição do Contrato');
    edt_descricao.setFocus;
    exit;
  end;

  if not (length(edt_Moeda.Text) > 0) then
  begin
    ShowMessage('Insira a sigla da Moeda do Contrato');
    edt_Moeda.setFocus;
    exit;
  end;

  if not (StrtoCurr(edt_valor.text) > 0) then
  begin
    ShowMessage('Insira o valor do Contrato');
    edt_Valor.setFocus;
    exit;
  end;

  if not (length(edt_Empresa.Text) > 0) then
  begin
    ShowMessage('Insira a Empresa do Caixa');
    btn_Pesquisar.setFocus;
    exit;
  end;

  if not (length(Edt_Cliente_Fornecedor.Text) > 0) then
  begin
    if rg_tipo.ItemIndex = 0 then
      ShowMessage('Insira o Cliente do Contrato')
    else
      ShowMessage('Insira o Fornecedor do Contrato');
    btn_CliFor.setFocus;
    exit;
  end;

  result := true;
end;

end.
